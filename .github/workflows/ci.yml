name: Build and Release MyNotePad

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  release:
    types: [published]
  create:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-2022
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2
      with:
        nuget-version: 'latest'
        
    - name: Restore NuGet packages
      run: |
        if (Test-Path "packages.config" -PathType Leaf) {
          Write-Host "Found packages.config, restoring packages..."
          nuget restore MyNotePad.sln
        } else {
          Write-Host "Checking for packages.config in subdirectories..."
          $configs = Get-ChildItem -Recurse -Name "packages.config"
          if ($configs) {
            Write-Host "Found packages.config files: $($configs -join ', ')"
            nuget restore MyNotePad.sln
          } else {
            Write-Host "No packages.config found, skipping NuGet restore"
          }
        }
      shell: pwsh
      
    - name: Build solution
      run: |
        msbuild MyNotePad.sln /p:Configuration=Release /p:Platform=Win32 /m /verbosity:minimal
        
    - name: Find build outputs
      id: find_outputs
      run: |
        Write-Host "Searching for build outputs..."
        $outputs = @()
        
        # Search for MyNotePad.exe
        $mynotePaths = @(
          "Release\MyNotePad.exe",
          "MyNotePad\Release\MyNotePad.exe",
          "Win32\Release\MyNotePad.exe",
          "Build\MyNotePad.exe"
        )
        
        foreach ($path in $mynotePaths) {
          if (Test-Path $path) {
            $outputs += $path
            Write-Host "Found MyNotePad.exe at: $path"
            break
          }
        }
        
        # Search for NotePadWTL.exe
        $wtlPaths = @(
          "Release\NotePadWTL.exe",
          "NotePadWTL\Release\NotePadWTL.exe",
          "Win32\Release\NotePadWTL.exe",
          "Build\NotePadWTL.exe"
        )
        
        foreach ($path in $wtlPaths) {
          if (Test-Path $path) {
            $outputs += $path
            Write-Host "Found NotePadWTL.exe at: $path"
            break
          }
        }
        
        if ($outputs.Count -eq 0) {
          Write-Host "No executables found. Searching all .exe files:"
          Get-ChildItem -Recurse -Include "*.exe" | ForEach-Object { 
            Write-Host "  $($_.FullName)" 
          }
          exit 1
        }
        
        # Set outputs for next step
        $outputsJson = $outputs | ConvertTo-Json -Compress
        echo "outputs=$outputsJson" >> $env:GITHUB_OUTPUT
        
        # Create dist directory and copy files
        New-Item -ItemType Directory -Force -Path "dist" | Out-Null
        
        foreach ($output in $outputs) {
          $fileName = Split-Path $output -Leaf
          Copy-Item $output "dist\$fileName" -Force
          Write-Host "Copied $output to dist\$fileName"
          
          # Copy PDB if exists
          $pdbPath = $output -replace "\.exe$", ".pdb"
          if (Test-Path $pdbPath) {
            $pdbFileName = $fileName -replace "\.exe$", ".pdb"
            Copy-Item $pdbPath "dist\$pdbFileName" -Force
            Write-Host "Copied PDB: $pdbFileName"
          }
        }
        
        Write-Host "Distribution files:"
        Get-ChildItem dist | ForEach-Object { Write-Host "  $($_.Name)" }
      shell: pwsh
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MyNotePad-Windows-${{ github.run_number }}
        path: dist/
        retention-days: 30
        
    - name: Create Release Package
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        $version = "${{ github.ref_name }}"
        $zipName = "MyNotePad-$version-Windows.zip"
        
        # Create README for the release
        @"
MyNotePad $version - Windows Release
===================================

This package contains the compiled Windows executables for MyNotePad.

Files included:
"@ | Out-File -FilePath "dist\README.txt" -Encoding UTF8
        
        Get-ChildItem dist -Name "*.exe" | ForEach-Object {
          Add-Content -Path "dist\README.txt" -Value "- $_ - Main application executable"
        }
        
        Get-ChildItem dist -Name "*.pdb" | ForEach-Object {
          Add-Content -Path "dist\README.txt" -Value "- $_ - Debug symbols (optional)"
        }
        
        @"

Installation:
1. Extract all files to a folder of your choice
2. Run the .exe file to start the application
3. No additional installation required

System Requirements:
- Windows 7 or later
- Visual C++ Redistributable (usually pre-installed)

For more information, visit: https://github.com/${{ github.repository }}
"@ | Add-Content -Path "dist\README.txt"
        
        # Create ZIP package
        Compress-Archive -Path "dist\*" -DestinationPath $zipName -Force
        Write-Host "Created release package: $zipName"
        
        echo "release_package=$zipName" >> $env:GITHUB_OUTPUT
      shell: pwsh
      id: create_package
      
    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.create_package.outputs.release_package }}
        tag_name: ${{ github.ref_name }}
        name: MyNotePad ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
